#if DEBUG
import Foundation
import CryptoKit
import JSONSugar
import FileSugar
/**
 * Data
 */
extension MockGen {
   /**
    * Random bank name
    * - Description: This method generates a random bank name from the
    *                `Banks` array. If the array is empty, the method returns `nil`.
    */
   public static var randomBank: String? { Banks.line }
   /**
    * Random note
    * - Description: This method generates a random note from the `Notes`
    *                array. If the array is empty, the method returns `nil`.
    */
   public static var randomNote: String? { Notes.line }
   /**
    * Random full name
    * - Description: This method generates a random full name from the `Names` array. If the array is empty, the method returns `nil`.
    * - Fixme: ⚠️️ Create firstNames, lastNames, fullNames? this is now in use MockGen.randomFirstName etc
    */
   public static var randomFullName: String? { Names.line }
}
/**
 * Extra
 */
extension MockGen {
   /**
    * Random SSID generator
    * - Description: Generates a random SSID for use in testing network-related
    *                functionalities. The SSID is selected from a predefined list
    *                of common Wi-Fi network names.
    * - Note: This method generates a random SSID from the `SSIDS` array, which contains a list of common wifi network names. If the array is empty, the method returns `nil`.
    * - Returns: A random SSID string from the `SSIDS` array, or `nil` if the array is empty.
    */
   public static var randomSSID: String? { SSIDS.line }
   /**
    * Random credit card issuer generator
    * - Description: This method generates a random credit card issuer name from a predefined list, aiding in the testing of payment processing systems.
    * - Note: This method generates a random credit card issuer name from the `CreditCardIssuers` array, which contains a list of common credit card issuers. If the array is empty, the method returns `nil`.
    * - Returns: A random credit card issuer name string from the `CreditCardIssuers` array, or `nil` if the array is empty.
    */
   public static var randomIssuer: String? { CreditCardIssuers.line }
   /**
    * Random brand name generator
    * - Description: This method generates a random brand name from the `Brands` array, which contains a list of common brand names. If the array is empty, the method returns `nil`.
    * - Note: This method generates a random brand name from the `Brands` array, which contains a list of common brand names. If the array is empty, the method returns `nil`.
    * - Returns: A random brand name string from the `Brands` array, or `nil` if the array is empty.
    */
   public static var randomBrand: String? { Brands.brands.randomElement() }
   /**
    * Random email
    * - Description: This method generates a random email by combining a random
    *                first name and a random brand name. If either the first name or
    *                brand name cannot be generated, the method returns `nil`.
    */
   public static var randomEmail: String? {
      guard let name: String = randomFirstName,
            let brand: String = randomBrand else { return nil }
      return getEmail(name: name, brand: brand)
   }
   /**
    * Random OTP generator
    * - Description: This method generates a random OTP (One-Time Password)
    *                for testing purposes. It uses a predefined format and a
    *                randomly generated secret to create the OTP. The secret is
    *                an uppercase string generated by the CodeGen class. The OTP
    *                is returned as a string in the format of a URL, which can be
    *                used to test OTP-related functionalities.
    * - Remark: Secret has a format behind it.  Uppercase random string seems to work
    * - Fixme: ⚠️️ randomnize more otp values later, see twofa package for details etc
    * - Fixme: ⚠️️ Maybe use TWOFA lib to gen the secret? we cant access seclib here so no, using SecRan.randomSecret should work better
    */
   public static var randomOTP: String? { // internal static let otps: [String] = ["otpauth://totp/test?secret=GEZDGNBV", "otpauth://hotp/test?secret=GEZDGNBV&algorithm=SHA512&digits=6&counter=1", "otpauth://totp/ACME%20Co:john.doe@email.com?secret=GEZDGNBV&algorithm=SHA512&digits=6&period=30.0&issuer=ACME%20Co&image=https://www.images.com/image.png"]
      // let secret: String = SecRan.randomSecret(min:8, max: 16) ?? "GEZDGNBV" //
      let secret: String = CodeGen.generatePassword(
         length: 8,
         useLowercase: false,
         useNumbers: false,
         useSpecialChars: false
      )
      // let urlString: String = "otpauth://totp/test?secret=\(secret)"
      // let urlString: String = "otpauth://hotp/test?secret=\(secret)&algorithm=SHA512&digits=6&counter=1"
      let name: String = MockGen.randomFirstName ?? "John"
      let issuer: String = MockGen.randomBrand ?? "ACME%20Co"
      let email: String = MockGen.getEmail(name: name, brand: issuer) ?? "john.doe@email.com"
      let img: String = (MockGen.getWebsite(brand: issuer) ?? "https://www.images.com/") + "image.png"
      let urlString: String = "otpauth://totp/\(issuer):\(email)?secret=\(secret)&algorithm=SHA512&digits=6&period=30.0&issuer=\(issuer)&image=\(img)"
      return urlString
      // "otpauth://totp/test?secret=\(secret)" // GEZDGNBV
   }
}
/**
 * Random boolean generators
 * - Abstract: Provides methods to generate random boolean values with varying probabilities for testing scenarios.
 * - Description: This section contains methods that generate random boolean
 *                values with varying probabilities. These methods are useful
 *                for simulating different scenarios in testing, such as the
 *                likelihood of an item being marked as a favorite, archived, or
 *                moved to the trash.
 * - Note: These methods generate random boolean values with different probabilities of being true, such as 1/8, 1/16, and 1/32. The methods use the `getRandomBool` method to generate the boolean values with the specified probability.
 * - Note: These methods are marked as `internal` to ensure they can only be accessed within the same module.
 * - Fixme: ⚠️️ move these out of MockGen and into app scope, its out of scope for this package etc
 */
extension MockGen {
   /**
    * Random favorite boolean
    * - Description: This method generates a random boolean value that
    *                represents a user's preference, such as marking an item as
    *                a favorite. The method has a higher probability of returning
    *                `false` to simulate a more realistic scenario where not all
    *                items are marked as favorites.
    * - Returns: A random boolean value with a 1/8 probability of being true.
    */
   public static var randomFavorite: Bool { getRandomBool(3) } // 1 / 8
   /**
    * Random archive boolean
    * - Description: This method generates a random boolean value with a
    *                1/16 probability of being true, which can be used to simulate
    *                the chance of an item being archived in various testing
    *                scenarios.
    * - Returns: A random boolean value with a 1/16 probability of being true.
    */
   public static var randomArchive: Bool { getRandomBool(4) } // 1 / 16
   /**
    * Random trash boolean
    * - Description: This method generates a random boolean value with a
    *                1/32 probability of being true, simulating the chance of an
    *                item being moved to the trash in a random scenario.
    * - Returns: A random boolean value with a 1/32 probability of being true.
    */
   public static var randomTrash: Bool { getRandomBool(5) } // 1 / 32
}
#endif
